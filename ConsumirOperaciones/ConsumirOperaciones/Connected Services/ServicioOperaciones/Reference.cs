//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsumirOperaciones.ServicioOperaciones {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioOperaciones.wsOperacionesSoap")]
    public interface wsOperacionesSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        int Sumar(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Sumar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> SumarAsync(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        int Restar(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Restar", ReplyAction="*")]
        System.Threading.Tasks.Task<int> RestarAsync(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicacion", ReplyAction="*")]
        int Multiplicacion(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplicacion", ReplyAction="*")]
        System.Threading.Tasks.Task<int> MultiplicacionAsync(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Division", ReplyAction="*")]
        int Division(int A, int B);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Division", ReplyAction="*")]
        System.Threading.Tasks.Task<int> DivisionAsync(int A, int B);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsOperacionesSoapChannel : ConsumirOperaciones.ServicioOperaciones.wsOperacionesSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsOperacionesSoapClient : System.ServiceModel.ClientBase<ConsumirOperaciones.ServicioOperaciones.wsOperacionesSoap>, ConsumirOperaciones.ServicioOperaciones.wsOperacionesSoap {
        
        public wsOperacionesSoapClient() {
        }
        
        public wsOperacionesSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsOperacionesSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsOperacionesSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsOperacionesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Sumar(int A, int B) {
            return base.Channel.Sumar(A, B);
        }
        
        public System.Threading.Tasks.Task<int> SumarAsync(int A, int B) {
            return base.Channel.SumarAsync(A, B);
        }
        
        public int Restar(int A, int B) {
            return base.Channel.Restar(A, B);
        }
        
        public System.Threading.Tasks.Task<int> RestarAsync(int A, int B) {
            return base.Channel.RestarAsync(A, B);
        }
        
        public int Multiplicacion(int A, int B) {
            return base.Channel.Multiplicacion(A, B);
        }
        
        public System.Threading.Tasks.Task<int> MultiplicacionAsync(int A, int B) {
            return base.Channel.MultiplicacionAsync(A, B);
        }
        
        public int Division(int A, int B) {
            return base.Channel.Division(A, B);
        }
        
        public System.Threading.Tasks.Task<int> DivisionAsync(int A, int B) {
            return base.Channel.DivisionAsync(A, B);
        }
    }
}
